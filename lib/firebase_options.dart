// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
/// Uses environment variables for security.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web => FirebaseOptions(
    apiKey:
        'AIzaSyD1rUbQB0USpFEBoSO1kH6QYRTvl_OKPvo', // Replace with your actual API key
    appId:
        '1:796545909849:web:abb40c2cd60d583f87dd48', // Replace with your actual App ID
    messagingSenderId: '796545909849', // Replace with your actual Sender ID
    projectId: 'to-do-list-2b175',
    authDomain: 'to-do-list-2b175.firebaseapp.com',
    storageBucket: 'to-do-list-2b175.firebasestorage.app',
  );

  static FirebaseOptions get android => FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_ANDROID_API_KEY'),
    appId: const String.fromEnvironment('FIREBASE_ANDROID_APP_ID'),
    messagingSenderId: const String.fromEnvironment(
      'FIREBASE_MESSAGING_SENDER_ID',
    ),
    projectId: const String.fromEnvironment('FIREBASE_PROJECT_ID'),
    storageBucket:
        '${const String.fromEnvironment('FIREBASE_PROJECT_ID')}.appspot.com',
  );

  static FirebaseOptions get ios => FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_IOS_API_KEY'),
    appId: const String.fromEnvironment('FIREBASE_IOS_APP_ID'),
    messagingSenderId: const String.fromEnvironment(
      'FIREBASE_MESSAGING_SENDER_ID',
    ),
    projectId: const String.fromEnvironment('FIREBASE_PROJECT_ID'),
    storageBucket:
        '${const String.fromEnvironment('FIREBASE_PROJECT_ID')}.appspot.com',
    iosBundleId: 'com.example.mini_todo_app',
  );

  static FirebaseOptions get macos => FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_MACOS_API_KEY'),
    appId: const String.fromEnvironment('FIREBASE_MACOS_APP_ID'),
    messagingSenderId: const String.fromEnvironment(
      'FIREBASE_MESSAGING_SENDER_ID',
    ),
    projectId: const String.fromEnvironment('FIREBASE_PROJECT_ID'),
    storageBucket:
        '${const String.fromEnvironment('FIREBASE_PROJECT_ID')}.appspot.com',
    iosBundleId: 'com.example.mini_todo_app',
  );

  static FirebaseOptions get windows => FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_WINDOWS_API_KEY'),
    appId: const String.fromEnvironment('FIREBASE_WINDOWS_APP_ID'),
    messagingSenderId: const String.fromEnvironment(
      'FIREBASE_MESSAGING_SENDER_ID',
    ),
    projectId: const String.fromEnvironment('FIREBASE_PROJECT_ID'),
    storageBucket:
        '${const String.fromEnvironment('FIREBASE_PROJECT_ID')}.appspot.com',
  );
}
